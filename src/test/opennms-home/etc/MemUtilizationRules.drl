package org.opennms.netmgt.correlation.drools;

import java.util.Date;

import org.opennms.core.utils.InetAddressUtils;
import org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.events.api.EventConstants;
import org.opennms.netmgt.model.events.EventUtils;

global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;
global org.opennms.netmgt.correlation.drools.NodeService nodeService;
global java.lang.Integer MEM_UTIL_HIGH_TRIGGER_COUNT;
global java.lang.Integer MEM_UTIL_HIGH_TIME_WINDOW;


/*
 * 8)  (Forwarding) If you receive >10 times traps memUtilizationHigh 
 * Then generate one single major alarm to be forwarded via SNMP to VizGems and email to nmsadmin@att.com.om.
 */

declare HighMemUtilSituation
	node : Long
	timerId : Integer
	occurrences : Integer
end

rule "initial memUtilizationHigh event received for node"
	salience 100
	when
		$e : Event( $uei : uei == "uei.opennms.org/vendor/TallMaple/TMS/traps/memUtilizationHigh", $nodeid : nodeid, $ipaddr : interface )
		not( HighMemUtilSituation( node == $nodeid ) )
	then
		retract( $e );
		HighMemUtilSituation situation = new HighMemUtilSituation();
		situation.setNode( $nodeid );
		situation.setTimerId( engine.setTimer( MEM_UTIL_HIGH_TIME_WINDOW ) );
		situation.setOccurrences( 1 );
		insert( situation );
		println( "Found memUtilizationHigh event for node " + $nodeid +". Inserted new situation " + situation + " and retracted event." );
		println( "Note: MEM_UTIL_HIGH_TRIGGER_COUNT is set to " + MEM_UTIL_HIGH_TRIGGER_COUNT );
end

rule "subsequent but NON-triggering memUtilizationHigh event received for node"
	salience 100
	when
		$e : Event( $uei : uei == "uei.opennms.org/vendor/TallMaple/TMS/traps/memUtilizationHigh", $nodeid : nodeid, $ipaddr : interface )
		$situation : HighMemUtilSituation( occurrences < ( MEM_UTIL_HIGH_TRIGGER_COUNT ), node == $nodeid )
	then
		println( "Found memUtilizationHigh event for active situation " + $situation + ". Retracting event. Incrementing occurrences on situation." );
		retract( $e );
		incrementOccurrences( $situation );
		update( $situation );
end

rule "subsequent TRIGGERING memUtilizationHigh event received for node"
	salience 1000
	when
		$e : Event( $uei : uei == "uei.opennms.org/vendor/TallMaple/TMS/traps/memUtilizationHigh", $nodeid : nodeid, $ipaddr : interface )
		$situation : HighMemUtilSituation( $occ : occurrences >= ( MEM_UTIL_HIGH_TRIGGER_COUNT ), node == $nodeid )
	then
		println( "Final memUtilizationHigh event on situation " + $situation + " triggered aggregate event, retracting event and situation; sending escalation event" );
		retract( $e );
		retract( $situation );
		sendAggregateMemUtilHighEvent( engine, $nodeid, $ipaddr, MEM_UTIL_HIGH_TRIGGER_COUNT, MEM_UTIL_HIGH_TIME_WINDOW );
end

rule "retract expired memUtilizationHigh situations"
	when
		$situation : HighMemUtilSituation( $nodeid : node, $timerId : timerId, $occ : occurrences < ( MEM_UTIL_HIGH_TRIGGER_COUNT ) )
		$expiration : TimerExpired( id == $timerId )
	then
		println( "Found expired memUtilizationHigh situation " + $situation + "; retracting situation and expiration." );
		retract( $situation );
		retract( $expiration );
end


function void incrementOccurrences( HighMemUtilSituation situation ) {
	Integer occ = situation.getOccurrences();
	occ++;
	situation.setOccurrences( occ );
}

function void sendAggregateMemUtilHighEvent( DroolsCorrelationEngine engine, Long nodeId, String ipAddr, Integer count, Integer timeWindow ) {
		Integer timeWindowMinutes = timeWindow / 60000;
        EventBuilder bldr = new EventBuilder("uei.opennms.org/vendor/TallMaple/TMS/correlation/aggregateMemUtilizationHigh", "Drools")
                .setNodeid(nodeId.intValue())
                .setInterface(InetAddressUtils.addr(ipAddr))
		.addParam("correlationEngineName", "Drools")
		.addParam("correlationRuleSetName", engine.getName())
		.addParam("correlationComments", "Observed at least " + count + " occurrences within " + timeWindowMinutes + " minutes")
		.addParam("occurrences", count.toString())
		.addParam("timeWindow", timeWindowMinutes.toString());
        engine.sendEvent(bldr.getEvent());
}

function void println(Object msg) {
	System.out.println(new Date() + " : " + msg);
}
