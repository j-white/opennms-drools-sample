package org.opennms.netmgt.correlation.drools;

import java.util.Date;

import org.opennms.core.utils.InetAddressUtils;
import org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.xml.event.Parm;
import org.opennms.netmgt.xml.event.Value;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.events.api.EventConstants;
import org.opennms.netmgt.model.events.EventUtils;

global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;
global org.opennms.netmgt.correlation.drools.NodeService nodeService;
global java.lang.Integer RP_USAGE_TRIGGER_COUNT;
global java.lang.Integer RP_USAGE_TIME_WINDOW;


/*
 * This ruleset does not correspond directly to any of the scenarios from Javier's document,
 * but is intended to serve as an example for dealing with any kind of events whose
 * parameters come into play in the correlation.
 */

declare ResourcePoolUtilSituation
	node : Long
	resourcePool : String
	type : String
	timerId : Integer
	occurrences : Integer
end

rule "initial resourcePoolUsage event received for node"
	salience 100
	when
		$e : Event( $uei : uei matches "uei.opennms.org/vendor/Juniper/MFC/traps/resourcePoolUsage(High|Low)",
					$rpName : parmCollection[0].value.content, 
					$nodeid : nodeid, $ipaddr : interface,
					$type : eval( $uei matches "UsageHigh$" ? "high" : "low" )
		not( ResourcePoolUtilSituation( node == $nodeid, resourcePool == $rpName, type == $type ) )
	then
		retract( $e );
		ResourcePoolUtilSituation situation = new ResourcePoolUtilSituation();
		situation.setNode( $nodeid );
		situation.setResourcePool( $rpName );
		situation.setType( $type );
		situation.setTimerId( engine.setTimer( RP_USAGE_TIME_WINDOW ) );
		situation.setOccurrences( 1 );
		insert( situation );
		println( "Found resourcePoolUsage event for node " + $nodeid +". Inserted new situation " + situation + " and retracted event." );
end

rule "subsequent but NON-triggering transactionRateHigh event received for node"
	salience 100
	when
		$e : Event( $uei : uei matches "uei.opennms.org/vendor/Juniper/MFC/traps/resourcePoolUsage(High|Low)",
					$rpName : parmCollection[0].value.content, 
					$nodeid : nodeid, $ipaddr : interface,
					$type : eval( $uei matches "UsageHigh$" ? "high" : "low" )
		$situation : ResourcePoolUtilSituation( node == $nodeid, resourcePool == $rpName, type == $type )
	then
		println( "Found resourcePoolUsage event for active situation " + $situation + ". Retracting event. Incrementing occurrences on situation." );
		retract( $e );
		incrementOccurrences( $situation );
		update( $situation );
end

rule "subsequent TRIGGERING resourcePoolUsage event received for node"
	salience 1000
	when
		$e : Event( $uei : uei matches "uei.opennms.org/vendor/Juniper/MFC/traps/resourcePoolUsage(High|Low)",
					$rpName : parmCollection[0].value.content, 
					$nodeid : nodeid, $ipaddr : interface,
					$type : eval( $uei matches "UsageHigh$" ? "high" : "low" )
		$situation : ResourcePoolUtilSituation( $occ : occurrences >= ( RP_USAGE_TRIGGER_COUNT), node == $nodeid, resourcePool == $rpName, type == $type )

	then
		println( "Final resourcePoolUsage event on situation " + $situation + " triggered critical event, retracting event and situation; sending escalation event" );
		retract( $e );
		retract( $situation );
		sendAggregateResourcePoolUsageEvent( engine, $nodeid, $ipaddr, $situation, RP_USAGE_TRIGGER_COUNT, RP_USAGE_TIME_WINDOW );
end

rule "retract expired transactionRateHigh situations"
	when
		$situation : ResourcePoolUtilSituation( $nodeid : node, $timerId : timerId, $occ : occurrences < ( XACT_RATE_HIGH_TRIGGER_COUNT ) )
		$expiration : TimerExpired( id == $timerId )
	then
		println( "Found expired transactionRateHigh situation " + $situation + "; retracting situation and expiration." );
		retract( $situation );
		retract( $expiration );
end


function void incrementOccurrences( ResourcePoolUtilSituation situation ) {
	Integer occ = situation.getOccurrences();
	occ++;
	situation.setOccurrences( occ );
}

function void sendAggregateResourcePoolUsageEvent( DroolsCorrelationEngine engine, Long nodeId, String ipAddr, Situation situation, Integer count, Integer timeWindow ) {
		Integer timeWindowMinutes = timeWindow / 60000;
        String outputUei = "uei.opennms.org/vendor/Juniper/MFC/correlation/aggregateResourcePoolUsage" + ("high".equals(situation.getType) ? "High" : "Low");
        EventBuilder bldr = new EventBuilder(outputUei, "Drools")
                .setNodeid(nodeId.intValue())
                .setInterface(InetAddressUtils.addr(ipAddr))
		.addParam("correlationEngineName", "Drools")
		.addParam("correlationRuleSetName", engine.getName())
		.addParam("correlationComments", "Observed at least " + count + " occurrences within " + timeWindowMinutes + " minutes")
		.addParam("occurrences", count.toString())
		.addParam("timeWindow", timeWindowMinutes.toString())
		.addParam("resourcePoolName", situation.getResourcePool());
        engine.sendEvent(bldr.getEvent());
}

function void println(Object msg) {
	System.out.println(new Date() + " : " + msg);
}
